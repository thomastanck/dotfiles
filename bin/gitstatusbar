#!/bin/python3

# i3blocks/bar/etc thing that outputs a short version of `git status`
# of the working directory of the currently focused terminal window
# Depends on i3ipc and i3blocks https://github.com/acrisci/i3ipc-python

import i3ipc

import sys, json, os, subprocess, time

# Create the Connection object that can be used to send commands and subscribe
# to events.
i3 = i3ipc.Connection()

def update(i3, e):
    # focused = i3.get_tree().find_focused()
    # title = focused.name

    # if not (focused.window_instance == "termite" or
    #         focused.window_instance == "xterm" or
    #         focused.window_instance == "st-256color"):
    #     print('{}', flush=True)
    #     return

    # print(focused)

    # username = os.environ['USER']
    # titleprefix = username + ': '

    # if not title.startswith(titleprefix):
    #     print('{}', flush=True)
    #     return

    # title = os.path.expanduser(title[3:])

    # os.chdir(title)

    try:
        s = subprocess.check_output(
                ["xpwd"],
                stderr=subprocess.DEVNULL
                ).decode("utf-8")

        os.chdir(s)

        s = subprocess.check_output(
                ["git", "status", "--porcelain"],
                stderr=subprocess.DEVNULL
                ).decode("utf-8")

        branchname = subprocess.check_output(
                ["git", "rev-parse", "--abbrev-ref", "HEAD"],
                stderr=subprocess.DEVNULL
                ).decode("utf-8").strip()

    except:
        print('{}', flush=True)
        return

    stagingcol = [l[:1] for l in s.split("\n")]
    workingcol = [l[1:2] for l in s.split("\n")]

    untracked = 0
    newstaged = 0
    modstaged = 0
    delstaged = 0
    for i in stagingcol:
        if i == "?":
            untracked += 1
        if i == "A":
            newstaged += 1
        if i == "M":
            modstaged += 1
        if i == "D":
            delstaged += 1

    newworking = 0
    modworking = 0
    delworking = 0
    for i in workingcol:
        if i == "A":
            newworking += 1
        if i == "M":
            modworking += 1
        if i == "D":
            delworking += 1

    output = [branchname]
    if newstaged:
        output.append(f"A:{newstaged}")
    if modstaged:
        output.append(f"M:{modstaged}")
    if delstaged:
        output.append(f"D:{delstaged}")
    if untracked:
        output.append(f"?:{untracked}")
    if newworking:
        output.append(f"a:{newworking}")
    if modworking:
        output.append(f"m:{modworking}")
    if delworking:
        output.append(f"d:{delworking}")

    output = " ".join(output)

    if output == "":
        output = "\u200B" # so the bar appears if there's a git repository, but displays nothing

    if (newstaged or modstaged or delstaged):
        color = '#FFFF00' # yellow on stage
    elif (newworking or modworking or delworking):
        color = '#00FFFF' # cyan on modified
    elif (untracked):
        color = '#FF00FF' # purple on untracked (dirty)
    else:
        color = '#FFFFFF' # if this is shown, nothing would be output regardless

    print(json.dumps({
        "full_text": output,
        "color": color
        }, ensure_ascii=False), flush=True)

i3.on('window::title', update)
i3.on('window::focus', update)
i3.on('window::close', update)
i3.on('workspace::focus', update) # causes too many events to trigger, but better than missing them ¯\_(ツ)_/¯
update(i3, None)
i3.main()
