" Run :so % while editing this file or
" run :so ~/.vimrc to load the changes into vim.

" Absolute bare minimum
set nocompatible
filetype off
set modelines=0

scriptencoding utf-8
set encoding=utf-8

" Only try to load plugis if not root
if system('whoami | tr -d [:space:]') != 'root'
	" set the runtime path to include Vundle and initialize
	set rtp+=~/.vim/bundle/Vundle.vim
	call vundle#begin()
	" alternatively, pass a path where Vundle should install plugins
	"call vundle#begin('~/some/path/here')

	" let Vundle manage Vundle, required
	Plugin 'VundleVim/Vundle.vim'

	Plugin 'surround.vim' " Delete/change/add parentheses/quotes/XML-tags/much more with ease
	Plugin 'repeat.vim' " Use . command with supported plugins

	Plugin 'vim-airline/vim-airline'
	Plugin 'vim-airline/vim-airline-themes'

	Plugin 'tpope/vim-fugitive' " Git integration
	Plugin 'tpope/vim-rhubarb' " GitHub integration
	Plugin 'airblade/vim-gitgutter'
	Plugin 'Valloric/YouCompleteMe'
	Plugin 'scrooloose/nerdtree'
	Plugin 'Xuyuanp/nerdtree-git-plugin'
	Plugin 'altercation/vim-colors-solarized'

	Plugin 'tpope/vim-commentary'

	Plugin 'fatih/vim-go'

	Plugin 'vim-pandoc/vim-pandoc'
	Plugin 'vim-pandoc/vim-pandoc-syntax'

	Plugin 'leafgarland/typescript-vim'
	Plugin 'Quramy/tsuquyomi'
	Plugin 'Shougo/vimproc.vim'

	Plugin 'junegunn/vim-easy-align'

	" All of your Plugins must be added before the following line
	call vundle#end()            " required
	filetype plugin indent on    " required
endif

syntax enable
"filetype plugin on

" gitgutter realtime updates
set updatetime=100

" YCM fix
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" Enable YCM for typescript
if !exists("g:ycm_semantic_triggers")
    let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

" vim-airline
set t_Co=256
let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'

let g:airline#extensions#hunks#enabled=0
let g:airline#extensions#whitespace#enabled=0
let g:airline#extensions#branch#enabled=1

let g:airline_section_y=""
let g:airline_section_z="%l/%L:%v"

" Word count for vim-pandoc filetype
let g:airline#extensions#wordcount#filetypes = g:airline#extensions#wordcount#filetypes . "|pandoc"

" Disable vim-pandoc styling
let g:pandoc#syntax#conceal#use = 0
" Disable vim-pandoc folding
let g:pandoc#modules#disabled = ["folding"]

" NERDTree
autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeShowHidden=1

" set colour scheme
if $TERM == "linux"
	let g:solarized_termcolors=256
endif
set background=dark
"set background=light
colorscheme solarized
" colorscheme desert

" set hidden lets you close (as in hide) buffers without saving them
set hidden

" Enable mouse!
set mouse=nv

" Make backspace work
set backspace=indent,eol,start

" Tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab

" statusline
set laststatus=2
set statusline=%f\ %h%w%m%r\ %=%(%l,%c%V\ %=\ %P%)

" Search options
set incsearch
set hlsearch
set ignorecase
set smartcase
noh " Plugins like to activate search somehow...

set keywordprg=":help" " c_K runs this command on the word under the cursor

set path^=** " :find recursively into subdirectories.
set wildmenu " Show autocomplete options in a menu
set wildignore+=*.pyc " Don't autocomplete to *.pyc files

set scrolloff=3 " Show 3 lines of context when scrolling
set relativenumber " Show relative line numbers on the left of the buffer
set number " Show line number of the current line

" Add fancy stuff to make tabs look cool and show trailing spaces and stuff.
set list
set listchars=
set listchars+=tab:╶─
set listchars+=trail:~
"	hah	haha	ha			hah   

" Code folding
set foldmethod=indent
set foldnestmax=10
"set nofoldenable
set foldlevel=0
" Open files with all folds opened by default
au BufRead * normal zR

" Source remappings
source ~/.vim/usr/remap.vim

" run cspdf on save for .md files for quick homework compilation
function SetUpCSPDF()
	silent exec "!cspdf % >/dev/null 2>&1 &"
	autocmd BufWritePost *.md silent exec "!cspdf % >/dev/null 2>&1 &"
	redraw!
endfunction
command CSPDF call SetUpCSPDF()

" run make on save
function SetUpAutoMake()
	autocmd BufWritePost * silent exec "!make AutoMake-% >/tmp/testlog 2>&1 &"
endfunction
command AutoMake call SetUpAutoMake()
call SetUpAutoMake()

function! s:get_visual_selection()
	" Why is this not a built-in Vim script function?!
	let [line_start, column_start] = getpos("'<")[1:2]
	let [line_end, column_end] = getpos("'>")[1:2]
	let lines = getline(line_start, line_end)
	if len(lines) == 0
		return ''
	endif
	let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
	let lines[0] = lines[0][column_start - 1:]
	return join(lines, "\n")
endfunction

command -range Clip call system('mclip', s:get_visual_selection())
